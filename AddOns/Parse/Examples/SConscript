# $Id $
import os,os.path

Import('WaliDir')
Import('LibInstallDir')
Import('BaseEnv')
Import('MkStatic')

StaticLibs = [
  os.path.join(LibInstallDir,'libwaliparse.a'),
  os.path.join(LibInstallDir,'libwali.a')
  ] if MkStatic else []

Libs = [
      'wali',
      'waliparse',
      'xerces-c',
    ] if not MkStatic else ['xerces-c']

LibPath = [
  LibInstallDir,
  WaliDir+'/AddOns/Parse/ThirdParty/xerces-c/lib',
  ] if not MkStatic else [ WaliDir+'/AddOns/Parse/ThirdParty/xerces-c/lib' ]

## ###############################
## Environment
env = BaseEnv.Clone(
    CPPPATH  = [
      os.path.join(WaliDir , 'Source'),
      os.path.join(WaliDir,'AddOns','Parse','Source'),
      os.path.join(WaliDir,'AddOns','Parse','ThirdParty','xerces-c','include'),
    ],
    CXXFLAGS = '-g -ggdb -Wall -Wformat=2 -W ',
    LIBS     = Libs,
    LIBPATH  = LibPath
)

# Used to record the tests that are built
built = []

# Reach weight domain example
ReachFiles= Split("""
Reach/ExMain.cpp
Reach/Reach.cpp
""")
Reach = env.Program('ExMain',ReachFiles + StaticLibs)
built.append(Reach)

Return('built')
