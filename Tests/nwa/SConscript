# Build the test programs 
import os,os.path

Import('WaliDir')
Import('LibInstallDir')
Import('ProgEnv')
Import('Debug')
Import('TestDir')

if Debug:
    print '\n+++ Entered "#/Tests/nwa/SConscript"\n'

[(gtest_lib, gtest_include)] = SConscript(os.path.join(TestDir,'ThirdParty/SConscript'))

env = ProgEnv.Clone()

if 'cl' != env['CC']:
    env.AppendUnique(LIBS=[gtest_lib, 'pthread'])
else:
    env.AppendUnique(LIBS=[gtest_lib])
env.AppendUnique(CPPPATH=[gtest_include, WaliDir])
env['WARNING_FLAGS'] = env['WARNING_FLAGS'].replace('-Wundef', '')

test_files = Split("""
    Source/test.cpp
    Source/fixtures.cpp
    Source/wali-prereqs.cpp
    Source/class-NestedWord/nested-word.cpp
    Source/class-NWA/supporting.cpp
    Source/class-NWA/construction-assignment.cpp
    Source/class-NWA/get-size-is-add-remove-clear.cpp
    Source/namespace-query/is-deterministic.cpp
    Source/namespace-query/states-overlap.cpp
    Source/namespace-query/language-contains.cpp
    Source/namespace-query/language-comparison.cpp
    Source/namespace-query/language-is-empty.cpp
    Source/namespace-construct/complement.cpp
    Source/namespace-construct/union.cpp
    Source/namespace-construct/intersect.cpp
    Source/namespace-construct/concatenate.cpp
    Source/namespace-construct/determinize.cpp
    Source/namespace-construct/star.cpp
    Source/namespace-construct/reverse.cpp 
    Source/serialization/idempotency.cpp
    Source/serialization/parser-unit-tests.cpp
    Source/namespace-nwa_pds/nwa-to-wpds.cpp
    Source/namespace-nwa_pds/wpds-to-nwa.cpp
    Source/namespace-nwa_pds/plus-wpds.cpp
    Source/namespace-nwa_pds/answers-nwa-to-backwards-pds-calls.cpp
    Source/namespace-nwa_pds/answers-nwa-to-backwards-pds-returns.cpp
    Source/namespace-nwa_pds/answers-nwa-to-pds-calls.cpp
    Source/namespace-nwa_pds/answers-nwa-to-pds-returns.cpp
    """)

just_compile = env.SConscript('Source/header-compilation/SConscript')

built = env.Program('nwa-test', test_files + just_compile)

Return('built')

#  ## ###############################
#  ## Environment
#  Env = ProgEnv.Clone()
#  
#  utf_lib = None
#  
#  ## Note - Be sure to use a list when 'Append'ing to CPPPATH
#  if "BOOST_HOME" in os.environ:
#     boost_home = os.environ["BOOST_HOME"]
#     Env.Append(CPPPATH = [boost_home],
#                LIBPATH = [os.path.join(boost_home, 'lib')])
#     utf_lib = os.path.join(boost_home, 'lib', 'libboost_unit_test_framework.a')
#  
#  ## Note - Be sure to use a list when 'Append'ing to CPPPATH
#  if "BOOST_INCLUDE" in os.environ:
#     boost_include = os.environ["BOOST_INCLUDE"]
#     Env.Append(CPPPATH = [boost_include])
#  
#  ## Note - Be sure to use a list when 'Append'ing to CPPPATH
#  if "BOOST_LIB" in os.environ:
#     boost_lib = os.environ["BOOST_LIB"]
#     Env.Append(LIBPATH = [boost_lib])
#     utf_lib = os.path.join(boost_lib, 'libboost_unit_test_framework.a')
#  
#  if utf_lib == None:
#     print "Well, I don't know where the library is; I'll try this and see if it works"
#     print "You might try setting BOOST_HOME (to Boost's root) or BOOST_LIB (to the lib dir)"
#     Env.Append(LIBS = ['boost_unit_test_framework'])
#  
#  built = []
#  
#  sources = Split("""
#      driver.cpp
#      arbitrary.cpp
#  """)
#  
#  if utf_lib:
#     sources = sources + [utf_lib]
#  
#  
#  ## Commented out because this is really old
#  
#  #exe = Env.Program('test-nwa.exe', sources + Env['StaticLibs'])
#  #built += (exe)
#  
#  built = []
#  
#  Return('built')

