# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_wali', [dirname(__file__)])
        except ImportError:
            import _wali
            return _wali
        if fp is not None:
            try:
                _mod = imp.load_module('_wali', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _wali = swig_import_helper()
    del swig_import_helper
else:
    import _wali
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _wali.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _wali.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _wali.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _wali.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _wali.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _wali.SwigPyIterator_equal(self, x)

    def copy(self):
        return _wali.SwigPyIterator_copy(self)

    def next(self):
        return _wali.SwigPyIterator_next(self)

    def __next__(self):
        return _wali.SwigPyIterator___next__(self)

    def previous(self):
        return _wali.SwigPyIterator_previous(self)

    def advance(self, n):
        return _wali.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _wali.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _wali.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _wali.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _wali.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _wali.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _wali.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _wali.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Printable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Printable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Printable, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _wali.delete_Printable
    __del__ = lambda self: None

    def to_string(self):
        return _wali.Printable_to_string(self)

    def toString(self):
        return _wali.Printable_toString(self)
Printable_swigregister = _wali.Printable_swigregister
Printable_swigregister(Printable)


def get_key_space():
    return _wali.get_key_space()
get_key_space = _wali.get_key_space

def clear_keyspace():
    return _wali.clear_keyspace()
clear_keyspace = _wali.clear_keyspace

def get_key(*args):
    return _wali.get_key(*args)
get_key = _wali.get_key

def get_key_source(k):
    return _wali.get_key_source(k)
get_key_source = _wali.get_key_source

def print_key(o, k, abbreviate=False):
    return _wali.print_key(o, k, abbreviate)
print_key = _wali.print_key

def key_2str(k):
    return _wali.key_2str(k)
key_2str = _wali.key_2str

def get_epsilon_key():
    return _wali.get_epsilon_key()
get_epsilon_key = _wali.get_epsilon_key
class KeySource(Printable):
    __swig_setmethods__ = {}
    for _s in [Printable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KeySource, name, value)
    __swig_getmethods__ = {}
    for _s in [Printable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KeySource, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _wali.delete_KeySource
    __del__ = lambda self: None

    def equal(self, rhs):
        return _wali.KeySource_equal(self, rhs)

    def hash(self):
        return _wali.KeySource_hash(self)
KeySource_swigregister = _wali.KeySource_swigregister
KeySource_swigregister(KeySource)

class GenKeySource(KeySource):
    __swig_setmethods__ = {}
    for _s in [KeySource]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenKeySource, name, value)
    __swig_getmethods__ = {}
    for _s in [KeySource]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GenKeySource, name)
    __repr__ = _swig_repr

    def __init__(self, g, k):
        this = _wali.new_GenKeySource(g, k)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _wali.delete_GenKeySource
    __del__ = lambda self: None

    def equal(self, rhs):
        return _wali.GenKeySource_equal(self, rhs)

    def hash(self):
        return _wali.GenKeySource_hash(self)

    def get_generation(self):
        return _wali.GenKeySource_get_generation(self)

    def get_key(self):
        return _wali.GenKeySource_get_key(self)
GenKeySource_swigregister = _wali.GenKeySource_swigregister
GenKeySource_swigregister(GenKeySource)

class SemElem(Printable):
    __swig_setmethods__ = {}
    for _s in [Printable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SemElem, name, value)
    __swig_getmethods__ = {}
    for _s in [Printable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SemElem, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _wali.delete_SemElem
    __del__ = lambda self: None

    def one(self):
        return _wali.SemElem_one(self)

    def zero(self):
        return _wali.SemElem_zero(self)

    def marshall_weight(self, o):
        return _wali.SemElem_marshall_weight(self, o)

    def quasi_one(self):
        return _wali.SemElem_quasi_one(self)

    def star(self):
        return _wali.SemElem_star(self)

    def extend(self, *args):
        return _wali.SemElem_extend(self, *args)

    def combine(self, *args):
        return _wali.SemElem_combine(self, *args)

    def equal(self, *args):
        return _wali.SemElem_equal(self, *args)

    def under_approximates(self, *args):
        return _wali.SemElem_under_approximates(self, *args)

    def diff(self, *args):
        return _wali.SemElem_diff(self, *args)

    def delta(self, *args):
        return _wali.SemElem_delta(self, *args)

    def extend_and_diff(self, next, subtrahend):
        return _wali.SemElem_extend_and_diff(self, next, subtrahend)

    def container_less_than(self, *args):
        return _wali.SemElem_container_less_than(self, *args)

    def hash(self):
        return _wali.SemElem_hash(self)

    def print_typename(self, os):
        return _wali.SemElem_print_typename(self, os)

    def to_string_typename(self):
        return _wali.SemElem_to_string_typename(self)

    def __str__(self):
        return _wali.SemElem___str__(self)
SemElem_swigregister = _wali.SemElem_swigregister
SemElem_swigregister(SemElem)
cvar = _wali.cvar
SemElem.xmltag = _wali.cvar.SemElem_xmltag


def test_semelem_impl(x):
    return _wali.test_semelem_impl(x)
test_semelem_impl = _wali.test_semelem_impl
class SemElemRefPtrContainerLessThan(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SemElemRefPtrContainerLessThan, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SemElemRefPtrContainerLessThan, name)
    __repr__ = _swig_repr

    def __call__(self, left, right):
        return _wali.SemElemRefPtrContainerLessThan___call__(self, left, right)

    def __init__(self):
        this = _wali.new_SemElemRefPtrContainerLessThan()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _wali.delete_SemElemRefPtrContainerLessThan
    __del__ = lambda self: None
SemElemRefPtrContainerLessThan_swigregister = _wali.SemElemRefPtrContainerLessThan_swigregister
SemElemRefPtrContainerLessThan_swigregister(SemElemRefPtrContainerLessThan)

class SemElemRefPtrHash(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SemElemRefPtrHash, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SemElemRefPtrHash, name)
    __repr__ = _swig_repr

    def __call__(self, se):
        return _wali.SemElemRefPtrHash___call__(self, se)

    def __init__(self):
        this = _wali.new_SemElemRefPtrHash()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _wali.delete_SemElemRefPtrHash
    __del__ = lambda self: None
SemElemRefPtrHash_swigregister = _wali.SemElemRefPtrHash_swigregister
SemElemRefPtrHash_swigregister(SemElemRefPtrHash)

class SemElemRefPtrEqual(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SemElemRefPtrEqual, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SemElemRefPtrEqual, name)
    __repr__ = _swig_repr

    def __call__(self, left, right):
        return _wali.SemElemRefPtrEqual___call__(self, left, right)

    def __init__(self):
        this = _wali.new_SemElemRefPtrEqual()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _wali.delete_SemElemRefPtrEqual
    __del__ = lambda self: None
SemElemRefPtrEqual_swigregister = _wali.SemElemRefPtrEqual_swigregister
SemElemRefPtrEqual_swigregister(SemElemRefPtrEqual)

class SemElemPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SemElemPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SemElemPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _wali.new_SemElemPtr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _wali.delete_SemElemPtr
    __del__ = lambda self: None

    def __eq__(self, that):
        return _wali.SemElemPtr___eq__(self, that)

    def __ne__(self, that):
        return _wali.SemElemPtr___ne__(self, that)

    def get_ptr(self):
        return _wali.SemElemPtr_get_ptr(self)

    def __deref__(self):
        return _wali.SemElemPtr___deref__(self)

    def __ref__(self):
        return _wali.SemElemPtr___ref__(self)

    def __lt__(self, that):
        return _wali.SemElemPtr___lt__(self, that)

    def is_empty(self):
        return _wali.SemElemPtr_is_empty(self)

    def is_valid(self):
        return _wali.SemElemPtr_is_valid(self)
    __swig_getmethods__["xmltag"] = _wali.SemElemPtr_xmltag_get
    if _newclass:
        xmltag = _swig_property(_wali.SemElemPtr_xmltag_get)

    def one(self):
        return _wali.SemElemPtr_one(self)

    def zero(self):
        return _wali.SemElemPtr_zero(self)

    def extend(self, *args):
        return _wali.SemElemPtr_extend(self, *args)

    def combine(self, *args):
        return _wali.SemElemPtr_combine(self, *args)

    def equal(self, *args):
        return _wali.SemElemPtr_equal(self, *args)

    def under_approximates(self, *args):
        return _wali.SemElemPtr_under_approximates(self, *args)

    def marshall_weight(self, o):
        return _wali.SemElemPtr_marshall_weight(self, o)

    def diff(self, *args):
        return _wali.SemElemPtr_diff(self, *args)

    def quasi_one(self):
        return _wali.SemElemPtr_quasi_one(self)

    def delta(self, *args):
        return _wali.SemElemPtr_delta(self, *args)

    def star(self):
        return _wali.SemElemPtr_star(self)

    def extend_and_diff(self, next, subtrahend):
        return _wali.SemElemPtr_extend_and_diff(self, next, subtrahend)

    def container_less_than(self, *args):
        return _wali.SemElemPtr_container_less_than(self, *args)

    def hash(self):
        return _wali.SemElemPtr_hash(self)

    def print_typename(self, os):
        return _wali.SemElemPtr_print_typename(self, os)

    def to_string_typename(self):
        return _wali.SemElemPtr_to_string_typename(self)

    def __str__(self):
        return _wali.SemElemPtr___str__(self)

    def to_string(self):
        return _wali.SemElemPtr_to_string(self)

    def toString(self):
        return _wali.SemElemPtr_toString(self)
SemElemPtr_swigregister = _wali.SemElemPtr_swigregister
SemElemPtr_swigregister(SemElemPtr)

class KeyPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KeyPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KeyPair, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _wali.new_KeyPair(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["first"] = _wali.KeyPair_first_set
    __swig_getmethods__["first"] = _wali.KeyPair_first_get
    if _newclass:
        first = _swig_property(_wali.KeyPair_first_get, _wali.KeyPair_first_set)
    __swig_setmethods__["second"] = _wali.KeyPair_second_set
    __swig_getmethods__["second"] = _wali.KeyPair_second_get
    if _newclass:
        second = _swig_property(_wali.KeyPair_second_get, _wali.KeyPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _wali.delete_KeyPair
    __del__ = lambda self: None
KeyPair_swigregister = _wali.KeyPair_swigregister
KeyPair_swigregister(KeyPair)


def strhashfn(str):
    return _wali.strhashfn(str)
strhashfn = _wali.strhashfn
class KeyPairMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KeyPairMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KeyPairMap, name)
    __repr__ = _swig_repr
    SIZE_TYPE_MAX = _wali.KeyPairMap_SIZE_TYPE_MAX

    def __init__(self, *args):
        this = _wali.new_KeyPairMap(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _wali.delete_KeyPairMap
    __del__ = lambda self: None

    def clear(self):
        return _wali.KeyPairMap_clear(self)

    def size(self):
        return _wali.KeyPairMap_size(self)

    def capacity(self):
        return _wali.KeyPairMap_capacity(self)

    def begin(self, *args):
        return _wali.KeyPairMap_begin(self, *args)

    def end(self, *args):
        return _wali.KeyPairMap_end(self, *args)

    def key(self, *args):
        return _wali.KeyPairMap_key(self, *args)

    def value(self, *args):
        return _wali.KeyPairMap_value(self, *args)

    def data(self, *args):
        return _wali.KeyPairMap_data(self, *args)

    def print_stats(self, *args):
        return _wali.KeyPairMap_print_stats(self, *args)

    def insert(self, *args):
        return _wali.KeyPairMap_insert(self, *args)

    def find(self, *args):
        return _wali.KeyPairMap_find(self, *args)

    def erase(self, *args):
        return _wali.KeyPairMap_erase(self, *args)
KeyPairMap_swigregister = _wali.KeyPairMap_swigregister
KeyPairMap_swigregister(KeyPairMap)

class PySemElem(SemElem):
    __swig_setmethods__ = {}
    for _s in [SemElem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySemElem, name, value)
    __swig_getmethods__ = {}
    for _s in [SemElem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PySemElem, name)
    __repr__ = _swig_repr

    def __init__(self, *args): 
    #standard SWIG initializer
        if self.__class__ == PySemElem:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _wali.new_PySemElem(*args)
        try: self.this.append(this)
        except: self.this = this 

    #Default initializer for userdata
        userdata = {}
        self.setuserdata(userdata)

    #SWIG Director refcounting is broken:
    #http://www.nabble.com/Correct-Python-reference-counting-with-directors--td23046686.html
    #Make sure a Python reference to all objects exist, so they are not deleted
        try:
            PySemElem.all_pysemelems[self] = [self]
        except:
            PySemElem.all_pysemelems = {self: self}
    def unref(self):
        del PySemElem.all_pysemelems[self]

    #decorator for printing errors
    @classmethod
    def printexc(klass, fn):
        def new(*args):
            try:
                return fn(*args)
            except Exception, e:
                import traceback
                traceback.print_exc()
                raise e
        return new

    #decorator for derefing if necessary
    @classmethod
    def deref_ifneeded(klass, fn):
        def new(*args):
    #Deref smart pointer if needed
            if hasattr(args[1], '__deref__'):
                tmp = list(args)
                tmp[1] = tmp[1].__deref__()
                args = tuple(tmp)
            return fn(*args)
        return new

    #Wrap access to userdata in nice fashion
    def __getattr__(self, name):
        try:
            return _swig_getattr(self, PySemElem, name)
        except AttributeError, e:
            try:
                return self.getuserdata()[name]
            except:
                raise e
    def __setattr__(self, name, value):
        if name in ['this'] or name in self.__dict__:
            self.__dict__[name] = value
        else:
            self.getuserdata()[name] = value
    def __delattr__(self, name):
        if name in self.__dict__:
            del self.__dict__[name]
        else:
            del self.getuserdata()[name]

    def __eq__(self, other):
    #Deref smart pointer if needed
        if hasattr(other, '__deref__'):
            other = other.__deref__()

        return self.pyequal(other)
    def __ne__(self, other):
    #Deref smart pointer if needed
        if hasattr(other, '__deref__'):
            other = other.__deref__()

        return not self.pyequal(other)



    def setuserdata(self, data):
        return _wali.PySemElem_setuserdata(self, data)

    def getuserdata(self):
        return _wali.PySemElem_getuserdata(self)

    def __str__(self):
        return _wali.PySemElem___str__(self)

    def pycombine(self, se):

                #Deref smart pointer if needed
        if hasattr(args[1], '__deref__'):
            tmp = list(args)
            tmp[1] = tmp[1].__deref__()
            args = tuple(tmp)


        return _wali.PySemElem_pycombine(self, se)


    def combine(self, se):

                #Deref smart pointer if needed
        if hasattr(args[1], '__deref__'):
            tmp = list(args)
            tmp[1] = tmp[1].__deref__()
            args = tuple(tmp)


        return _wali.PySemElem_combine(self, se)


    def pyextend(self, se):

                #Deref smart pointer if needed
        if hasattr(args[1], '__deref__'):
            tmp = list(args)
            tmp[1] = tmp[1].__deref__()
            args = tuple(tmp)


        return _wali.PySemElem_pyextend(self, se)


    def extend(self, se):

                #Deref smart pointer if needed
        if hasattr(args[1], '__deref__'):
            tmp = list(args)
            tmp[1] = tmp[1].__deref__()
            args = tuple(tmp)


        return _wali.PySemElem_extend(self, se)


    def pydelta(self, se):
        "Python implementation of default delta, from SemElem.cpp"
        first = self.pycombine(se)
        if se.equal(first.__deref__()):
            second = self.pyzero()
        else:
            second = first
        toret = PySemElemPtrPair(first, second)
        return toret



    def delta(self, se):
        return _wali.PySemElem_delta(self, se)

    def pyequal(self, se):
        return _wali.PySemElem_pyequal(self, se)

    def equal(self, se):
        return _wali.PySemElem_equal(self, se)

    def pyone(self):
        return _wali.PySemElem_pyone(self)

    def pyzero(self):
        return _wali.PySemElem_pyzero(self)

    def one(self):
        return _wali.PySemElem_one(self)

    def zero(self):
        return _wali.PySemElem_zero(self)
    __swig_destroy__ = _wali.delete_PySemElem
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _wali.disown_PySemElem(self)
        return weakref_proxy(self)
PySemElem_swigregister = _wali.PySemElem_swigregister
PySemElem_swigregister(PySemElem)

class SemElemPtrPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SemElemPtrPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SemElemPtrPair, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _wali.new_SemElemPtrPair(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["first"] = _wali.SemElemPtrPair_first_set
    __swig_getmethods__["first"] = _wali.SemElemPtrPair_first_get
    if _newclass:
        first = _swig_property(_wali.SemElemPtrPair_first_get, _wali.SemElemPtrPair_first_set)
    __swig_setmethods__["second"] = _wali.SemElemPtrPair_second_set
    __swig_getmethods__["second"] = _wali.SemElemPtrPair_second_get
    if _newclass:
        second = _swig_property(_wali.SemElemPtrPair_second_get, _wali.SemElemPtrPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _wali.delete_SemElemPtrPair
    __del__ = lambda self: None
SemElemPtrPair_swigregister = _wali.SemElemPtrPair_swigregister
SemElemPtrPair_swigregister(SemElemPtrPair)

class PySemElemPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySemElemPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySemElemPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _wali.new_PySemElemPtr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _wali.delete_PySemElemPtr
    __del__ = lambda self: None

    def __eq__(self, that):
        return _wali.PySemElemPtr___eq__(self, that)

    def __ne__(self, that):
        return _wali.PySemElemPtr___ne__(self, that)

    def get_ptr(self):
        return _wali.PySemElemPtr_get_ptr(self)

    def __deref__(self):
        return _wali.PySemElemPtr___deref__(self)

    def __ref__(self):
        return _wali.PySemElemPtr___ref__(self)

    def __lt__(self, that):
        return _wali.PySemElemPtr___lt__(self, that)

    def is_empty(self):
        return _wali.PySemElemPtr_is_empty(self)

    def is_valid(self):
        return _wali.PySemElemPtr_is_valid(self)

    def setuserdata(self, data):
        return _wali.PySemElemPtr_setuserdata(self, data)

    def getuserdata(self):
        return _wali.PySemElemPtr_getuserdata(self)

    def __str__(self):
        return _wali.PySemElemPtr___str__(self)

    def pycombine(self, se):

                #Deref smart pointer if needed
        if hasattr(args[1], '__deref__'):
            tmp = list(args)
            tmp[1] = tmp[1].__deref__()
            args = tuple(tmp)


        return _wali.PySemElemPtr_pycombine(self, se)


    def combine(self, se):

                #Deref smart pointer if needed
        if hasattr(args[1], '__deref__'):
            tmp = list(args)
            tmp[1] = tmp[1].__deref__()
            args = tuple(tmp)


        return _wali.PySemElemPtr_combine(self, se)


    def pyextend(self, se):

                #Deref smart pointer if needed
        if hasattr(args[1], '__deref__'):
            tmp = list(args)
            tmp[1] = tmp[1].__deref__()
            args = tuple(tmp)


        return _wali.PySemElemPtr_pyextend(self, se)


    def extend(self, se):

                #Deref smart pointer if needed
        if hasattr(args[1], '__deref__'):
            tmp = list(args)
            tmp[1] = tmp[1].__deref__()
            args = tuple(tmp)


        return _wali.PySemElemPtr_extend(self, se)


    def pydelta(self, se):
        "Python implementation of default delta, from SemElem.cpp"
        first = self.pycombine(se)
        if se.equal(first.__deref__()):
            second = self.pyzero()
        else:
            second = first
        toret = PySemElemPtrPair(first, second)
        return toret



    def delta(self, se):
        return _wali.PySemElemPtr_delta(self, se)

    def pyequal(self, se):
        return _wali.PySemElemPtr_pyequal(self, se)

    def equal(self, se):
        return _wali.PySemElemPtr_equal(self, se)

    def pyone(self):
        return _wali.PySemElemPtr_pyone(self)

    def pyzero(self):
        return _wali.PySemElemPtr_pyzero(self)

    def one(self):
        return _wali.PySemElemPtr_one(self)

    def zero(self):
        return _wali.PySemElemPtr_zero(self)
    __swig_getmethods__["xmltag"] = _wali.PySemElemPtr_xmltag_get
    if _newclass:
        xmltag = _swig_property(_wali.PySemElemPtr_xmltag_get)

    def under_approximates(self, *args):
        return _wali.PySemElemPtr_under_approximates(self, *args)

    def marshall_weight(self, o):
        return _wali.PySemElemPtr_marshall_weight(self, o)

    def diff(self, *args):
        return _wali.PySemElemPtr_diff(self, *args)

    def quasi_one(self):
        return _wali.PySemElemPtr_quasi_one(self)

    def star(self):
        return _wali.PySemElemPtr_star(self)

    def extend_and_diff(self, next, subtrahend):
        return _wali.PySemElemPtr_extend_and_diff(self, next, subtrahend)

    def container_less_than(self, *args):
        return _wali.PySemElemPtr_container_less_than(self, *args)

    def hash(self):
        return _wali.PySemElemPtr_hash(self)

    def print_typename(self, os):
        return _wali.PySemElemPtr_print_typename(self, os)

    def to_string_typename(self):
        return _wali.PySemElemPtr_to_string_typename(self)

    def to_string(self):
        return _wali.PySemElemPtr_to_string(self)

    def toString(self):
        return _wali.PySemElemPtr_toString(self)
PySemElemPtr_swigregister = _wali.PySemElemPtr_swigregister
PySemElemPtr_swigregister(PySemElemPtr)

class PySemElemPtrPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySemElemPtrPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySemElemPtrPair, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _wali.new_PySemElemPtrPair(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["first"] = _wali.PySemElemPtrPair_first_set
    __swig_getmethods__["first"] = _wali.PySemElemPtrPair_first_get
    if _newclass:
        first = _swig_property(_wali.PySemElemPtrPair_first_get, _wali.PySemElemPtrPair_first_set)
    __swig_setmethods__["second"] = _wali.PySemElemPtrPair_second_set
    __swig_getmethods__["second"] = _wali.PySemElemPtrPair_second_get
    if _newclass:
        second = _swig_property(_wali.PySemElemPtrPair_second_get, _wali.PySemElemPtrPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _wali.delete_PySemElemPtrPair
    __del__ = lambda self: None
PySemElemPtrPair_swigregister = _wali.PySemElemPtrPair_swigregister
PySemElemPtrPair_swigregister(PySemElemPtrPair)

class Trans(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Trans, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Trans, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num_trans"] = _wali.Trans_num_trans_set
    __swig_getmethods__["num_trans"] = _wali.Trans_num_trans_get
    if _newclass:
        num_trans = _swig_property(_wali.Trans_num_trans_get, _wali.Trans_num_trans_set)

    def __init__(self, *args):
        this = _wali.new_Trans(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _wali.delete_Trans
    __del__ = lambda self: None

    def copy(self, *args):
        return _wali.Trans_copy(self, *args)

    def worklist_data(self):
        return _wali.Trans_worklist_data(self)

    def fromState(self, *args):
        return _wali.Trans_fromState(self, *args)

    def from_state(self, *args):
        return _wali.Trans_from_state(self, *args)

    def stack(self, *args):
        return _wali.Trans_stack(self, *args)

    def toState(self, *args):
        return _wali.Trans_toState(self, *args)

    def to_state(self, *args):
        return _wali.Trans_to_state(self, *args)

    def weight(self, *args):
        return _wali.Trans_weight(self, *args)

    def get_delta(self, *args):
        return _wali.Trans_get_delta(self, *args)

    def set_weight(self, w):
        return _wali.Trans_set_weight(self, w)

    def set_delta(self, w):
        return _wali.Trans_set_delta(self, w)

    def set_worklist_data(self, wd):
        return _wali.Trans_set_worklist_data(self, wd)

    def combine_trans(self, tp):
        return _wali.Trans_combine_trans(self, tp)

    def keypair(self):
        return _wali.Trans_keypair(self)

    def modified(self):
        return _wali.Trans_modified(self)

    def get_config(self):
        return _wali.Trans_get_config(self)

    def set_config(self, c):
        return _wali.Trans_set_config(self, c)

    def poststar_eps_closure(self, se):
        return _wali.Trans_poststar_eps_closure(self, se)

    def apply_post(self, tw):
        return _wali.Trans_apply_post(self, tw)

    def apply_pre(self, tw):
        return _wali.Trans_apply_pre(self, tw)

    def apply_weight_changer(self, wc):
        return _wali.Trans_apply_weight_changer(self, wc)
Trans_swigregister = _wali.Trans_swigregister
Trans_swigregister(Trans)

class TransSetImpl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransSetImpl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TransSetImpl, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _wali.TransSetImpl_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _wali.TransSetImpl___nonzero__(self)

    def __bool__(self):
        return _wali.TransSetImpl___bool__(self)

    def __len__(self):
        return _wali.TransSetImpl___len__(self)

    def append(self, x):
        return _wali.TransSetImpl_append(self, x)

    def __contains__(self, x):
        return _wali.TransSetImpl___contains__(self, x)

    def __getitem__(self, i):
        return _wali.TransSetImpl___getitem__(self, i)

    def add(self, x):
        return _wali.TransSetImpl_add(self, x)

    def discard(self, x):
        return _wali.TransSetImpl_discard(self, x)

    def __init__(self, *args):
        this = _wali.new_TransSetImpl(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def empty(self):
        return _wali.TransSetImpl_empty(self)

    def size(self):
        return _wali.TransSetImpl_size(self)

    def clear(self):
        return _wali.TransSetImpl_clear(self)

    def swap(self, v):
        return _wali.TransSetImpl_swap(self, v)

    def erase(self, x):
        return _wali.TransSetImpl_erase(self, x)

    def count(self, x):
        return _wali.TransSetImpl_count(self, x)
    __swig_destroy__ = _wali.delete_TransSetImpl
    __del__ = lambda self: None
TransSetImpl_swigregister = _wali.TransSetImpl_swigregister
TransSetImpl_swigregister(TransSetImpl)

class TransSet(Printable):
    __swig_setmethods__ = {}
    for _s in [Printable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransSet, name, value)
    __swig_getmethods__ = {}
    for _s in [Printable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TransSet, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _wali.new_TransSet()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _wali.delete_TransSet
    __del__ = lambda self: None

    def find(self, *args):
        return _wali.TransSet_find(self, *args)

    def each(self, *args):
        return _wali.TransSet_each(self, *args)

    def insert(self, t):
        return _wali.TransSet_insert(self, t)

    def erase(self, *args):
        return _wali.TransSet_erase(self, *args)

    def clear(self):
        return _wali.TransSet_clear(self)

    def empty(self):
        return _wali.TransSet_empty(self)

    def clear_and_release_resources(self):
        return _wali.TransSet_clear_and_release_resources(self)

    def begin(self, *args):
        return _wali.TransSet_begin(self, *args)

    def end(self, *args):
        return _wali.TransSet_end(self, *args)

    def size(self):
        return _wali.TransSet_size(self)

    def as_list(self):
        return _wali.TransSet_as_list(self)
TransSet_swigregister = _wali.TransSet_swigregister
TransSet_swigregister(TransSet)

class TransVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TransVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _wali.TransVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _wali.TransVector___nonzero__(self)

    def __bool__(self):
        return _wali.TransVector___bool__(self)

    def __len__(self):
        return _wali.TransVector___len__(self)

    def __getslice__(self, i, j):
        return _wali.TransVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _wali.TransVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _wali.TransVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _wali.TransVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _wali.TransVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _wali.TransVector___setitem__(self, *args)

    def pop(self):
        return _wali.TransVector_pop(self)

    def append(self, x):
        return _wali.TransVector_append(self, x)

    def empty(self):
        return _wali.TransVector_empty(self)

    def size(self):
        return _wali.TransVector_size(self)

    def swap(self, v):
        return _wali.TransVector_swap(self, v)

    def clear(self):
        return _wali.TransVector_clear(self)

    def get_allocator(self):
        return _wali.TransVector_get_allocator(self)

    def pop_back(self):
        return _wali.TransVector_pop_back(self)

    def __init__(self, *args):
        this = _wali.new_TransVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _wali.TransVector_push_back(self, x)

    def front(self):
        return _wali.TransVector_front(self)

    def back(self):
        return _wali.TransVector_back(self)

    def assign(self, n, x):
        return _wali.TransVector_assign(self, n, x)

    def resize(self, *args):
        return _wali.TransVector_resize(self, *args)

    def reserve(self, n):
        return _wali.TransVector_reserve(self, n)

    def capacity(self):
        return _wali.TransVector_capacity(self)
    __swig_destroy__ = _wali.delete_TransVector
    __del__ = lambda self: None
TransVector_swigregister = _wali.TransVector_swigregister
TransVector_swigregister(TransVector)

class DotAttributePrinter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DotAttributePrinter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DotAttributePrinter, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def print_extra_attributes(self, *args):
        return _wali.DotAttributePrinter_print_extra_attributes(self, *args)
    __swig_destroy__ = _wali.delete_DotAttributePrinter
    __del__ = lambda self: None
DotAttributePrinter_swigregister = _wali.DotAttributePrinter_swigregister
DotAttributePrinter_swigregister(DotAttributePrinter)


def is_epsilon_transition(trans):
    return _wali.is_epsilon_transition(trans)
is_epsilon_transition = _wali.is_epsilon_transition

def is_any_transition(trans):
    return _wali.is_any_transition(trans)
is_any_transition = _wali.is_any_transition
class WFA(Printable):
    __swig_setmethods__ = {}
    for _s in [Printable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WFA, name, value)
    __swig_getmethods__ = {}
    for _s in [Printable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WFA, name)
    __repr__ = _swig_repr
    INORDER = _wali.WFA_INORDER
    REVERSE = _wali.WFA_REVERSE
    MAX = _wali.WFA_MAX
    IterativeOriginal = _wali.WFA_IterativeOriginal
    IterativeWpds = _wali.WFA_IterativeWpds
    TarjanFwpds = _wali.WFA_TarjanFwpds
    CrosscheckAll = _wali.WFA_CrosscheckAll
    __swig_setmethods__["global_default_path_summary_implementation"] = _wali.WFA_global_default_path_summary_implementation_set
    __swig_getmethods__["global_default_path_summary_implementation"] = _wali.WFA_global_default_path_summary_implementation_get
    if _newclass:
        global_default_path_summary_implementation = _swig_property(_wali.WFA_global_default_path_summary_implementation_get, _wali.WFA_global_default_path_summary_implementation_set)
    __swig_setmethods__["global_default_path_summary_fwpds_top_down"] = _wali.WFA_global_default_path_summary_fwpds_top_down_set
    __swig_getmethods__["global_default_path_summary_fwpds_top_down"] = _wali.WFA_global_default_path_summary_fwpds_top_down_get
    if _newclass:
        global_default_path_summary_fwpds_top_down = _swig_property(_wali.WFA_global_default_path_summary_fwpds_top_down_get, _wali.WFA_global_default_path_summary_fwpds_top_down_set)

    def __init__(self, *args):
        this = _wali.new_WFA(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _wali.delete_WFA
    __del__ = lambda self: None

    def clear(self):
        return _wali.WFA_clear(self)

    def set_initial_state(self, key):
        return _wali.WFA_set_initial_state(self, key)

    def initial_state(self):
        return _wali.WFA_initial_state(self)

    def get_initial_state(self):
        return _wali.WFA_get_initial_state(self)

    def is_initial_state(self, key):
        return _wali.WFA_is_initial_state(self, key)

    def add_final_state(self, *args):
        return _wali.WFA_add_final_state(self, *args)

    def is_final_state(self, key):
        return _wali.WFA_is_final_state(self, key)

    def set_query(self, newQuery):
        return _wali.WFA_set_query(self, newQuery)

    def get_query(self):
        return _wali.WFA_get_query(self)

    def get_generation(self):
        return _wali.WFA_get_generation(self)

    def set_generation(self, g):
        return _wali.WFA_set_generation(self, g)

    def get_some_weight(self):
        return _wali.WFA_get_some_weight(self)

    def add_trans(self, *args):
        return _wali.WFA_add_trans(self, *args)

    def erase(self, arg2, stack, to):
        return _wali.WFA_erase(self, arg2, stack, to)

    def erase_state(self, q):
        return _wali.WFA_erase_state(self, q)

    def find(self, p, g, q, t):
        return _wali.WFA_find(self, p, g, q, t)

    def for_each(self, *args):
        return _wali.WFA_for_each(self, *args)

    def intersect(self, *args):
        return _wali.WFA_intersect(self, *args)

    def intersect_worklist(self, wmaker, fa, dest):
        return _wali.WFA_intersect_worklist(self, wmaker, fa, dest)

    def intersect_cross(self, wmaker, fa, dest):
        return _wali.WFA_intersect_cross(self, wmaker, fa, dest)

    def to_regex(self):
        return _wali.WFA_to_regex(self)

    def path_summary(self):
        return _wali.WFA_path_summary(self)

    def path_summary_iterative_original(self, *args):
        return _wali.WFA_path_summary_iterative_original(self, *args)

    def path_summary_iterative_wpds(self):
        return _wali.WFA_path_summary_iterative_wpds(self)

    def path_summary_tarjan_fwpds(self, *args):
        return _wali.WFA_path_summary_tarjan_fwpds(self, *args)

    def path_summary_crosscheck_all(self):
        return _wali.WFA_path_summary_crosscheck_all(self)

    def path_summary_via_wpds(self, wpds):
        return _wali.WFA_path_summary_via_wpds(self, wpds)

    def prune(self):
        return _wali.WFA_prune(self)

    def filter(self, *args):
        return _wali.WFA_filter(self, *args)

    def duplicate_states(self, st, output):
        return _wali.WFA_duplicate_states(self, st, output)

    def marshall(self, o):
        return _wali.WFA_marshall(self, o)

    def marshall_state(self, o, key):
        return _wali.WFA_marshall_state(self, o, key)

    def insert(self, tnew):
        return _wali.WFA_insert(self, tnew)

    def match(self, p, y):
        return _wali.WFA_match(self, p, y)

    def add_state(self, key, zero):
        return _wali.WFA_add_state(self, key, zero)

    def get_state(self, *args):
        return _wali.WFA_get_state(self, *args)

    def get_states(self):
        return _wali.WFA_get_states(self)

    def get_final_states(self):
        return _wali.WFA_get_final_states(self)

    def num_states(self):
        return _wali.WFA_num_states(self)

    def num_transitions(self):
        return _wali.WFA_num_transitions(self)

    def read_out_combine_over_all_paths_values(self, *args):
        return _wali.WFA_read_out_combine_over_all_paths_values(self, *args)

    def set_default_path_summary_implementation(self, i):
        return _wali.WFA_set_default_path_summary_implementation(self, i)

    def get_default_path_summary_implementation(self):
        return _wali.WFA_get_default_path_summary_implementation(self)

    def epsilon_close(self, start):
        return _wali.WFA_epsilon_close(self, start)

    def epsilon_close_cached(self, start, cache):
        return _wali.WFA_epsilon_close_cached(self, start, cache)

    def epsilon_close_mohri(self, start):
        return _wali.WFA_epsilon_close_mohri(self, start)

    def epsilon_close_fwpds(self, start):
        return _wali.WFA_epsilon_close_fwpds(self, start)

    def epsilon_close_cached_mohri_demand(self, start, cache):
        return _wali.WFA_epsilon_close_cached_mohri_demand(self, start, cache)

    def epsilon_close_cached_fwpds_demand(self, start, cache):
        return _wali.WFA_epsilon_close_cached_fwpds_demand(self, start, cache)

    def epsilon_close_cached_mohri_all(self, start, cache):
        return _wali.WFA_epsilon_close_cached_mohri_all(self, start, cache)

    def epsilon_close_cached_fwpds_all_singles(self, start, cache):
        return _wali.WFA_epsilon_close_cached_fwpds_all_singles(self, start, cache)

    def epsilon_close_cached_fwpds_all_multi(self, start, cache):
        return _wali.WFA_epsilon_close_cached_fwpds_all_multi(self, start, cache)

    def generic_fwpds_poststar(self, sources, trans_accept):
        return _wali.WFA_generic_fwpds_poststar(self, sources, trans_accept)

    def generic_wpds_poststar(self, sources, trans_accept, wpds, query_weight, state_weight):
        return _wali.WFA_generic_wpds_poststar(self, sources, trans_accept, wpds, query_weight, state_weight)

    def compute_all_reaching_weights(self, *args):
        return _wali.WFA_compute_all_reaching_weights(self, *args)

    def remove_epsilons(self):
        return _wali.WFA_remove_epsilons(self)

    def simulate(self, start, word):
        return _wali.WFA_simulate(self, start, word)

    def is_accepted_with_nonzero_weight(self, word):
        return _wali.WFA_is_accepted_with_nonzero_weight(self, word)

    def determinize(self, *args):
        return _wali.WFA_determinize(self, *args)

    def semideterminize(self, *args):
        return _wali.WFA_semideterminize(self, *args)

    def is_isomorphic_to(self, *args):
        return _wali.WFA_is_isomorphic_to(self, *args)

    def equal(self, other):
        return _wali.WFA_equal(self, other)

    def complete(self, *args):
        return _wali.WFA_complete(self, *args)

    def complement_states(self):
        return _wali.WFA_complement_states(self)
    __swig_getmethods__["is_isomorphism"] = lambda x: _wali.WFA_is_isomorphism
    if _newclass:
        is_isomorphism = staticmethod(_wali.WFA_is_isomorphism)
    __swig_getmethods__["next_states_no_eclose"] = lambda x: _wali.WFA_next_states_no_eclose
    if _newclass:
        next_states_no_eclose = staticmethod(_wali.WFA_next_states_no_eclose)

    def print_statistics(self, os):
        return _wali.WFA_print_statistics(self, os)

    def to_wpds(self, *args):
        return _wali.WFA_to_wpds(self, *args)

    def alphabet(self):
        return _wali.WFA_alphabet(self)

    def outgoing_trans_set(self, *args):
        return _wali.WFA_outgoing_trans_set(self, *args)

    def end_of_epsilon_chain(self, starting_state):
        return _wali.WFA_end_of_epsilon_chain(self, starting_state)

    def collapse_transitions_forward_from(self, state):
        return _wali.WFA_collapse_transitions_forward_from(self, state)

    def remove_states_with_in_degree0(self):
        return _wali.WFA_remove_states_with_in_degree0(self)

    def collapse_epsilon_chains(self):
        return _wali.WFA_collapse_epsilon_chains(self)

    def __str__(self):
        return _wali.WFA___str__(self)

    def print_dot(self, *args):
        return _wali.WFA_print_dot(self, *args)
WFA_swigregister = _wali.WFA_swigregister
WFA_swigregister(WFA)
WFA.xmltag = _wali.cvar.WFA_xmltag
WFA.xmlquery_tag = _wali.cvar.WFA_xmlquery_tag
WFA.xmlinorder_tag = _wali.cvar.WFA_xmlinorder_tag
WFA.xmlreverse_tag = _wali.cvar.WFA_xmlreverse_tag

def WFA_is_isomorphism(left, left_states, right, right_states, check_weights):
    return _wali.WFA_is_isomorphism(left, left_states, right, right_states, check_weights)
WFA_is_isomorphism = _wali.WFA_is_isomorphism

def WFA_next_states_no_eclose(wfa, froms):
    return _wali.WFA_next_states_no_eclose(wfa, froms)
WFA_next_states_no_eclose = _wali.WFA_next_states_no_eclose


_wali.Interesting_swigconstant(_wali)
Interesting = _wali.Interesting

_wali.Uninteresting_swigconstant(_wali)
Uninteresting = _wali.Uninteresting

_wali.Invalid_swigconstant(_wali)
Invalid = _wali.Invalid

def simplify(input, tester):
    return _wali.simplify(input, tester)
simplify = _wali.simplify
class WPDS(Printable):
    __swig_setmethods__ = {}
    for _s in [Printable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WPDS, name, value)
    __swig_getmethods__ = {}
    for _s in [Printable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WPDS, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _wali.new_WPDS(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _wali.delete_WPDS
    __del__ = lambda self: None

    def clear(self):
        return _wali.WPDS_clear(self)

    def set_worklist(self, wl):
        return _wali.WPDS_set_worklist(self, wl)

    def add_rule(self, *args):
        return _wali.WPDS_add_rule(self, *args)

    def replace_rule(self, *args):
        return _wali.WPDS_replace_rule(self, *args)

    def erase_rule(self, from_state, from_stack, to_state, to_stack1, to_stack2):
        return _wali.WPDS_erase_rule(self, from_state, from_stack, to_state, to_stack1, to_stack2)

    def prestar(self, *args):
        return _wali.WPDS_prestar(self, *args)

    def poststar(self, *args):
        return _wali.WPDS_poststar(self, *args)

    def marshall(self, o):
        return _wali.WPDS_marshall(self, o)

    def print_dot(self, o, print_state=False):
        return _wali.WPDS_print_dot(self, o, print_state)

    def count_rules(self):
        return _wali.WPDS_count_rules(self)

    def for_each(self, *args):
        return _wali.WPDS_for_each(self, *args)

    def __call__(self, t):
        return _wali.WPDS___call__(self, t)

    def is_pds_state(self, k):
        return _wali.WPDS_is_pds_state(self, k)

    def num_pds_states(self):
        return _wali.WPDS_num_pds_states(self)

    def get_states(self):
        return _wali.WPDS_get_states(self)

    def construct_cfg(self, entries, entryState, cfg):
        return _wali.WPDS_construct_cfg(self, entries, entryState, cfg)

    def get_the_zero(self):
        return _wali.WPDS_get_the_zero(self)

    def print_statistics(self, os):
        return _wali.WPDS_print_statistics(self, os)

    def to_wfa(self, wfa):
        return _wali.WPDS_to_wfa(self, wfa)

    def __str__(self):
        return _wali.WPDS___str__(self)
WPDS_swigregister = _wali.WPDS_swigregister
WPDS_swigregister(WPDS)
WPDS.xmltag = _wali.cvar.WPDS_xmltag

class EWPDS(WPDS):
    __swig_setmethods__ = {}
    for _s in [WPDS]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EWPDS, name, value)
    __swig_getmethods__ = {}
    for _s in [WPDS]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EWPDS, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _wali.new_EWPDS(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _wali.delete_EWPDS
    __del__ = lambda self: None

    def add_rule(self, *args):
        return _wali.EWPDS_add_rule(self, *args)

    def prestar(self, *args):
        return _wali.EWPDS_prestar(self, *args)

    def marshall(self, o):
        return _wali.EWPDS_marshall(self, o)

    def __call__(self, t):
        return _wali.EWPDS___call__(self, t)

    def lookup_rule(self, to_state, to_stack1, to_stack2):
        return _wali.EWPDS_lookup_rule(self, to_state, to_stack1, to_stack2)

    def replace_rule(self, *args):
        return _wali.EWPDS_replace_rule(self, *args)

    def __str__(self):
        return _wali.EWPDS___str__(self)
EWPDS_swigregister = _wali.EWPDS_swigregister
EWPDS_swigregister(EWPDS)
EWPDS.xmltag = _wali.cvar.EWPDS_xmltag

class FWPDS(EWPDS):
    __swig_setmethods__ = {}
    for _s in [EWPDS]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FWPDS, name, value)
    __swig_getmethods__ = {}
    for _s in [EWPDS]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FWPDS, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _wali.new_FWPDS(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _wali.delete_FWPDS
    __del__ = lambda self: None

    def use_newton(self, set):
        return _wali.FWPDS_use_newton(self, set)

    def is_output_tensored(self):
        return _wali.FWPDS_is_output_tensored(self)

    def prestar(self, *args):
        return _wali.FWPDS_prestar(self, *args)

    def poststar(self, *args):
        return _wali.FWPDS_poststar(self, *args)

    def poststar_igr(self, input, output):
        return _wali.FWPDS_poststar_igr(self, input, output)

    def top_down_eval(self, f):
        return _wali.FWPDS_top_down_eval(self, f)
FWPDS_swigregister = _wali.FWPDS_swigregister
FWPDS_swigregister(FWPDS)
FWPDS.xmltag = _wali.cvar.FWPDS_xmltag

class Reach(SemElem):
    __swig_setmethods__ = {}
    for _s in [SemElem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Reach, name, value)
    __swig_getmethods__ = {}
    for _s in [SemElem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Reach, name)
    __repr__ = _swig_repr

    def __init__(self, b):
        this = _wali.new_Reach(b)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _wali.delete_Reach
    __del__ = lambda self: None

    def one(self):
        return _wali.Reach_one(self)

    def zero(self):
        return _wali.Reach_zero(self)

    def extend(self, rhs):

                #Deref smart pointer if needed
        if hasattr(args[1], '__deref__'):
            tmp = list(args)
            tmp[1] = tmp[1].__deref__()
            args = tuple(tmp)


        return _wali.Reach_extend(self, rhs)


    def combine(self, rhs):

                #Deref smart pointer if needed
        if hasattr(args[1], '__deref__'):
            tmp = list(args)
            tmp[1] = tmp[1].__deref__()
            args = tuple(tmp)


        return _wali.Reach_combine(self, rhs)


    def equal(self, rhs):
        return _wali.Reach_equal(self, rhs)

    def from_string(self, s):
        return _wali.Reach_from_string(self, s)
    __swig_setmethods__["num_reaches"] = _wali.Reach_num_reaches_set
    __swig_getmethods__["num_reaches"] = _wali.Reach_num_reaches_get
    if _newclass:
        num_reaches = _swig_property(_wali.Reach_num_reaches_get, _wali.Reach_num_reaches_set)
Reach_swigregister = _wali.Reach_swigregister
Reach_swigregister(Reach)

# This file is compatible with both classic and new-style classes.


